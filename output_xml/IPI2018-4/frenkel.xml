<?xml version="1.0" encoding="utf-8"?>
<papers>
  <paper>
    <metadata>
      <author value="\index{}"/>
      <author value="\index{}"/>
      <author value="\index{}"/>
      <author value="\index{}"/>
      <annotation value="\Abst{In software-defined networking (SDN), the control plane and the data plane are decoupled. This allows high flexibility by providing abstractions for network management applications and being directly programmable. However, reconfiguration and updates of a network are sometimes inevitable due to topology changes, maintenance, or failures. In the scenario, a current route $C$ and a set of possible new routes ${N_i}"/>
    </metadata>
    <fulltext>
      <literature/>
      <command value="\renewcommand">
        <braces>
          <braces>
            <text value="{}"/>
            <command value="\figurename">
              <braces/>
              <braces>
                <braces>
                  <text value="{}"/>
                  <command value="\protect"/>
                  <command value="\bf">
                    <braces>
                      <text value="Figure"/>
                    </braces>
                    <braces/>
                  </command>
                  <command value="\renewcommand">
                    <braces>
                      <braces>
                        <text value="{}"/>
                        <command value="\tablename">
                          <braces/>
                          <braces>
                            <braces>
                              <text value="{}"/>
                              <command value="\protect"/>
                              <command value="\bf">
                                <braces>
                                  <text value="Table"/>
                                </braces>
                                <braces/>
                              </command>
                            </braces>
                          </braces>
                        </command>
                      </braces>
                    </braces>
                  </command>
                </braces>
              </braces>
            </command>
          </braces>
        </braces>
      </command>
      <text value="frenkel"/>
      <text value="SEAMLESS ROUTE UPDATES IN SOFTWARE-DEFINED NETWORKING VIA QUALITY OF SERVICE COMPLIANCE VERIFICATION"/>
      <text value="Seamless route updates in software-defined networking via quality of service compliance verification"/>
      <text value="S."/>
      <text value="L. Frenkel and D. Khankin"/>
      <text value="S."/>
      <text value="L. Frenkel$^1$and D. Khankin$^2$"/>
      <command value="\titel">
        <braces>
          <braces>
            <text value="{}"/>
            <command value="\tit">
              <braces/>
              <braces>
                <braces>
                  <text value="{}"/>
                  <command value="\aut">
                    <braces/>
                    <braces>
                      <braces>
                        <text value="{}"/>
                        <command value="\autkol">
                          <braces/>
                          <braces>
                            <braces>
                              <text value="{}"/>
                              <command value="\titkol">
                                <braces/>
                              </command>
                            </braces>
                          </braces>
                        </command>
                      </braces>
                    </braces>
                  </command>
                </braces>
              </braces>
            </command>
          </braces>
        </braces>
      </command>
      <command value="\renewcommand">
        <braces>
          <braces>
            <text value="{}"/>
            <command value="\thefootnote">
              <braces/>
              <braces>
                <braces>
                  <text value="{}"/>
                  <command value="\arabic">
                    <braces>
                      <braces>
                        <text value="{}"/>
                        <text value="footnote"/>
                      </braces>
                    </braces>
                    <braces/>
                    <braces/>
                  </command>
                </braces>
              </braces>
            </command>
          </braces>
        </braces>
      </command>
      <command value="\footnotetext">
        <braces>
          <text value="\footnotetext[1]{}"/>
        </braces>
      </command>
      <text value="Institute of Informatics Problems, Federal Research Center ``Computer Science and Control&amp;apos;&amp;apos; of the Russian Academy of Sciences, 44-2 Vavilov Str., Moscow 119333, Russian Federation,"/>
      <command value="\mbox">
        <braces>
          <braces>
            <text value="{}"/>
            <affiliation>
              <braces>
                <text value="fsergei51@gmail.com"/>
              </braces>
            </affiliation>
          </braces>
        </braces>
        <braces/>
        <braces/>
      </command>
      <command value="\footnotetext">
        <braces>
          <text value="\footnotetext[2]{}"/>
        </braces>
      </command>
      <text value="Computer Science Department, Ben-Gurion University of the Negev, Beer-Sheva 84105, Israel,"/>
      <command value="\mbox">
        <braces>
          <braces>
            <text value="{}"/>
            <affiliation>
              <braces>
                <text value="danielkh@post.bgu.ac.il"/>
              </braces>
            </affiliation>
          </braces>
        </braces>
        <braces/>
        <braces/>
      </command>
      <text value="Frenkel S."/>
      <text value="L."/>
      <text value="Khankin D."/>
      <text value="Френкель С."/>
      <text value="Ханкин Д."/>
      <command value="\small">
        <braces>
          <braces>
            <text value="{}"/>
          </braces>
        </braces>
      </command>
      <command value="\textbf">
        <braces>
          <text value="\textbf{}"/>
        </braces>
      </command>
      <command value="\thepage">
        <braces/>
      </command>
      <command value="\hfill"/>
      <command value="\specialsymbol">
        <braces>
          <text value="~---"/>
        </braces>
      </command>
      <text value="INFORMATICS AND APPLICATIONS"/>
      <text value="2018"/>
      <text value="volume 12"/>
      <text value="issue"/>
      <text value="4"/>
      <command value="\small">
        <braces>
          <braces>
            <text value="{}"/>
          </braces>
        </braces>
      </command>
      <command value="\specialsymbol">
        <braces>
          <text value="~---"/>
        </braces>
      </command>
      <text value="INFORMATICS AND APPLICATIONS"/>
      <text value="2018"/>
      <text value="volume 12"/>
      <text value="issue"/>
      <text value="4"/>
      <command value="\hfill"/>
      <command value="\textbf">
        <braces>
          <text value="\textbf{}"/>
        </braces>
      </command>
      <command value="\thepage">
        <braces/>
        <braces/>
        <braces/>
      </command>
      <command value="\vspace*">
        <braces>
          <braces>
            <text value="{}"/>
            <text value="4pt"/>
          </braces>
        </braces>
        <braces/>
      </command>
      <formula id="id1" value="$, where one of the &#10;new routes is required to replace the current route, are given. There is a chance that &#10;a~new route $"/>
      <text value="N_i"/>
      <formula id="id2" value="$ is longer than a~different new route $"/>
      <text value="N_j"/>
      <formula id="id3" value="$, but $"/>
      <text value="N_i"/>
      <formula id="id4" value="$ is &#10;a~more reliable one and it will update faster or perform better after the update &#10;in terms of quality of service (QoS) demands. &#10;Taking into account the random nature of the network functioning, &#10;the present authors supplement the recently proposed algorithm by Delaet&#10;\textit{et al}.\ for route updates with &#10;a~technique based on Markov chains (MCs). As such, an enhanced algorithm &#10;for complying QoS demands during route updates is proposed&#10;in a~seamless fashion. First, &#10;an extension to the update algorithm of Delaet \textit{et al}.\ &#10;that describes the transmission of packets through a~chosen route and compares &#10;the update process for all possible alternative routes is suggested. Second, several &#10;methods for choosing a~combination of preferred subparts of new routes, resulting &#10;in an optimal, in the sense of QoS compliance, new route is provided.} &#10;&#10;\KWE{software-defined networking; Markov chains; quality of service}&#10;&#10;\DOI{10.14357/19922264180408}&#10;&#10;&#10;\vspace*{8pt}&#10;&#10;&#10;\vskip 12pt plus 9pt minus 6pt&#10;&#10; \thispagestyle{myheadings}&#10;&#10; \begin{multicols}{2}&#10;&#10; \label{st\stat}&#10;&#10;\section{Introduction}&#10;\label{s:Intro}&#10;&#10;\noindent&#10;Software-defined networking is an emerging network paradigm, in which the &#10;control plane is decoupled from the data plane enabling centralized control &#10;logic. Such a~dynamic network may require frequent modifications and updates to &#10;the network topology and configuration. &#10;Also, the network topology is available to the centralized control entity, there, &#10;due to this flexibility, it is possible to perform offline optimized calculations.&#10;&#10;Network functions virtualization (NFV) allows replacing traditional network &#10;devices with software that is running on commodity servers. This software &#10;implements the functionality that was previously provided by dedicated hardware. &#10;Network functions virtualization&#10; allows services to be composed of virtual network functions (VNF) hosted on &#10;different data centers. Software-defined networking, &#10;when applied to NFV, helps in addressing challenges &#10;of dynamic resource management and intelligent service &#10;orchestration~\cite{rao_sdn_2014}. Sometimes, traffic is often required to pass &#10;through and be processed by an ordered sequence of possibly remote &#10;VNFs~\cite{ghaznavi_service_2016}. For example, traffic may be required to pass &#10;through intrusion detection system, proxy, load balancer, or a~firewall. &#10;Such concatenation of services is called \textit{service function chaining} &#10;(SFC).&#10;&#10;Consider, for example, two communicating parties in a~network featuring complex &#10;network topology (e.\,g., Small-world network), and the communication flow is &#10;passed over a~series of VNFs. It may be the case that the network operator is &#10;required to move the communicating flow to a~different path due to QoS &#10;requirements or other possible cost considerations. We are interested &#10;to model the anticipated expected number of steps until the update is complete &#10;given a~possible new route following the required QoS demands, e.\,g., &#10;delay, communication rounds, cost, etc. &#10;&#10;%Aforesaid dynamic networking requires frequent modifications and updates to the network. &#10;Let us consider a pair $(C, \{N_i\})$ where a~current route~$C$ from~$s$ to~$d$ &#10;is scheduled to be replaced by a new route from the set~$\{N_i\}$, each from~$s$ &#10;to~$d$ either. Let us model each route as an ordered list of network elements, such &#10;as VNFs (SFCs) or generally saying routers. Each new route~$N_i$ is constructed &#10;during the update process, and thus, certain delays may be introduced due to&#10; initial packet processing or due to possible losses. &#10; %There, the eventual arrival of packets along the new route during the update process is critical for successful route update. Another possible example is when the routes are SFCs, and the requirement is to update a current chain to a new one, different service chains may exhibit different delays. &#10;&#10;The design goals must be achieved by constructing effective algorithms for &#10;efficient packet QoS routing in NFV/SDN computer network. Depending on the &#10;QoS metric, the lower (e.\,g., for reliability) or upper (e.\,g., for a~delay) &#10;constraints represent the desired bounds that the orchestration must meet. &#10;Since different configurations could meet these bounds, the designer should also &#10;optimize against a~specific metric by using these both ends of the extreme. &#10;&#10;Methods based on integer linear programming (ILP) were proposed in several works &#10;(see section~\ref{sec:related_work}). The difficulty of using tools based on ILP &#10; in the operational work of an administrator is that in view of the possible &#10; infeasibility of the resulting solution, it may take not a~few resources (time, efforts) &#10; until acceptable QoS values can be ensured.&#10;&#10;We consider the use of ``design via verification&amp;apos;&amp;apos; approach, suggesting a~method &#10;for complying QoS demands. The method is based on augmenting the update algorithm with&#10;a~verification logic. Namely, we suggest the use of &#10;\textit{Probabilistic real-time Computation Tree Logic} &#10;(PCTL)~\cite{hansson_logic_1994} for expressing real-time and probability in systems. &#10;Using PCTL, we can express the probability for a~process to complete after &#10;a~certain number of steps along an execution path and verify the selected route &#10;for the update.&#10;&#10;&#10;%Assume that packets are sent from a source node $s$ to a destination node $d$ along the current route. After the update process is finished, packets will be forwarded from $s$ to $d$ along the new route. &#10;Delaet \textit{et al.}\ proposed a~multicast-based scheme for seamlessly updating &#10;a~current route to a~new one~\cite{delaet_seamless_2015}. &#10;According to the multicast scheme, the controller instructs &#10;a~router to temporarily have two $(s,d)$ entries in the routing table. When &#10;a~router $r \neq d$ receives a~packet from~$s$ to~$d$, it sends the packet &#10;according to the forwarding instructions of all of its $(s,d)$ routing &#10;table entries. When two identical copies of a~packet that was multicasted &#10;over the current and new portion of a~route arrive, the controller can dismantle &#10;the current route, as the new route is ready. During the update process, packets &#10;should not be lost, no cycles should be formed, and communication should not &#10;be disrupted.&#10;&#10;%Taking into account the random nature of the network functioning, we supplement the algorithm for route updates introduced by Delaet et al. in \cite{delaet_seamless_2015}, with a technique based on Markov chains. In our extension of the algorithm, we describe the transmission of packets through a chosen route and compare the update process for all the possible alternative routes that are candidates for replacement. &#10;&#10;Our contribution is a model for a successful route update, including its &#10;intermediate steps, as MC states, each with &#10;a~given probability. With our model, we are able to characterize the quality of &#10;an update by expected number of steps in the~MC. &#10;%We use Markov chains to characterize the quality of the update service, and represent the expected number of steps in the Markov chain as the quality of a successful update. While, the probability for an update event &#10;&#10;We suggest an enhanced update method for the network administrator to augment &#10;his decision regarding QoS demands in terms of various network parameters and &#10;possible failure of the update process. Moreover, in contrast to other works, &#10;we are able to provide a~version of an algorithm that can perform real-time QoS&#10; assessment during a~route update, for each subpart of a~route. At last, using &#10; our method, it is possible that the active new route will be comprised of subparts &#10; of different new routes, providing optimal route update service in regard of &#10; required network QoS. &#10;&#10;%We assume that each new route is legal. &#10;%However, mixing subroutes belonging to different routes may result in inconsistent state or a cycle formed in the network. We use different &#10;%&#10;%&#10;%&#10;%We model the update process as a service, namely as a VNF, and we use Markov chains to characterize the quality of the update service. Using the expected number of steps in the Markov chain representing the update, we abstract the quality of the update service. We calculate for each possible new (sub-)route the expected number of steps required to update an old (sub-)route successfully. Subsequently, the old route is updated to the new route which requires less number of steps with high probability. We supplement the seamless update algorithm proposed by the authors of \cite{delaet_seamless_2015} with the model in this work.&#10;&#10;%The virtualized service implementing the update algorithm will provide a recommendation for an optimal choice of a route, based on the performed calculations. Fundamentally, we create a QoS VNF for seamlessly updating a route, regarding network parameters, and taking into consideration the complexity and possible failures of updating a route. In case there exist several alternatives for a route update, there is a chance that one of the possible new routes is much longer, however, a more reliable one, and as such will update faster. &#10;%&#10;%&#10;%One of the important requirements to modification process is that the update process should not form congestion in the network, nor result in time delays, and not lose any packets. &#10;%&#10;%&#10;%Additionally, we provide an enhanced version of an algorithm that can perform the quality of service assessment during the update process, for each subpart of the new route. &#10;%&#10;%We propose a directed graph $G=(V,E)$, for representing the possible legal combinations of sub-routes. The set of common nodes to $(C, \{N_i\})$ subdivides the old route and each of the new routes to sub-routes. For two sub-routes represented by the nodes $u,v \in V$, the sub-route $v$ can be launched after $u$ if and only if there exists a directed edge $(u,v) \in E$. Otherwise, the launch of $v$ after $u$ is forbidden and can result in a cycle formed in the network.&#10;&#10;&#10;%The results of this work helped to develop an operating strategy for a network administrator, supporting both, seamlessly updating a route, and providing QoS requirements. &#10;&#10;Extended abstract of this work appeared as a conference paper &#10;in~\cite{frenkel_predicting_2017} which presented preliminary results. &#10;In this work, we describe in detail the system settings and bring new results &#10;by providing two additional algorithms.&#10;{\looseness=1&#10;&#10;}&#10;&#10;In the following section, we overview the related work. Next, we provide &#10;the required definitions and the system settings and describe the MC &#10;characterization of the network. Further, we describe different update setting, &#10;accordingly accompanying algorithms and data structures, used for QoS assessment &#10;during route updates.&#10;&#10;\vspace*{-9pt}&#10;&#10;\section{Related Work}&#10;\label{sec:related_work}&#10;&#10;\vspace*{-2pt}&#10;%The design goals must be achieved by constructing effective algorithms for efficient packet QoS routing in NFV/SDN computer network. %These algorithms, which must enable an administrator to orchestrate the existing services exported by remote providers, were considered in \cite{martins_clickos_2014, zaalouk_orchsec:_2014}. Likewise, the functional behavior (e.g., services being deprecated by their providers), as well as changes in the non-functional behavior of the orchestrated services (e.g., an increased execution time) were also considered.&#10;&#10;%Depending on the QoS metric, the lower (e.g., for reliability) or upper (e.g., for delay) constraints represent the desired bounds that the orchestration must meet. Since different configurations could meet these bounds, the designer must also optimize against a specific metric by using these both ends of extreme.&#10;&#10;\noindent&#10;Quality of service routing using multipath was proposed in~\cite{devi_approach_2015}. &#10;The routing algorithm, initially, eliminates all links that do not meet the &#10;bandwidth requirements. Then, it finds disjoint shortest paths based on &#10;the residual network graph in each iteration.&#10;&#10;The work~\cite{egilmez_distributed_2012} proposed a~QoS optimized routing &#10;over multidomain OpenFlow networks managed by a~distributed control plane, &#10;where each controller performs optimal routing within its domain. &#10;The QoS routing problem was posed as a~constrained shortest path (CSP) problem, &#10;and the proposed solution computes a~near-optimal route, based on LARAC &#10;(Lagrange relaxation based aggregated cost)&#10;algorithm~\cite{juttner_lagrange_2001}. The proposed algorithm is an approximation &#10;algorithm; it always gives a~suboptimal solution.&#10;&#10;For traditional network architecture, a~routing strategy approach based on &#10;ILP was introduced in~\cite{yu_efficient_2013}.&#10; The main disadvantage of using ILP is that the problem is NP-hard. &#10; Additionally, ILP cannot be applied to probabilistic values. &#10; Using linear programming (not limited to integers) rounded to integer solutions &#10; will not yield an optimal solution.&#10; &#10;&#10;Route updates are extensively researched in SDN~\cite{foerster_survey_2016}, &#10;standing on the work by Reitblatt \textit{et al.}\ where requirements for SDN &#10;updates were examined. This work focused on per-packet consistency property, &#10;stating that packets have to be forwarded either using the initial configuration &#10;or the final configuration but never a~mixture of them, throughout the update &#10;process~\cite{reitblatt_consistent_2011}. The authors proposed &#10;a~2-phase commit technique which relies on packets tagging so that either of &#10;the rules is applied. However, such technique wastes critical network resources &#10;and complications are formed due to packet tagging~\cite{foerster_survey_2016}. &#10;Further, Delaet \textit{et al.}\ showed in~\cite{delaet_seamless_2015} &#10;that using a~careful multicast during route updates provides &#10;a~better working solution.&#10;&#10;Hogan and Esposito propose in~\cite{hogan_stochastic_2017} the use of&#10; Bayesian networks for delay estimation as a~traffic engineering tool and model &#10; the path selection problem using a~risk minimization technique. &#10; However, the authors state that the accuracy of their model is limited by its &#10; ability to correctly identify dependencies in the data. In our work, &#10; we suggest a~general tool for probabilistic verification of any network parameter, &#10; which does not depend on variance within the dataset.&#10; &#10; &#10;&#10;In~\cite{mcgeer_safe_2012}, an update protocol proposed where packets are &#10;sent to the controller during updates; such approach adds &#10;a~significant cost to the control plane bandwidth~\cite{delaet_seamless_2015}. &#10;In~\cite{mcgeer_correct_2013}, an algorithm to find &#10;a~safe update sequence expressed as a~logic circuit has been proposed. &#10;However, the algorithm &#10;requires a~dedicated protocol which is not currently &#10;supported~\cite{foerster_survey_2016}. The authors &#10;of~\cite{katta_incremental_2013} propose to perform the 2-phase update &#10;scheme from~\cite{reitblatt_consistent_2011} incrementally, making the update longer. &#10;%For a thorough review of route updates, the reader is referred to \cite{foerster_survey_2016}.&#10;&#10;&#10;&#10;&#10;&#10;&#10;Software-defined networking allows the involvement of the network administrator into the network &#10;management during route udpdates and, in particular, during packet transmission. &#10;Thus, it would be highly desirable to support the decision making process &#10;with the right tools. Our novelty is exactly such tool, for augmenting &#10;online decision making of the network administrator during network management &#10;in a~stochastic environment.&#10;%In this work, we propose a technique to optimize the update process by selecting the preferred (sub-)route in order to reduce the update time. We use the expected number of steps for successfully completing the update as a QoS metric, and extend the algorithm by Delaet~et~al. with Discrete Time Markov Chains (DTMC) for finding (sub-)routes which are preferred in terms of QoS. % As such, we propose to use the route updates algorithm from \cite{delaet_seamless_2015} as a virtual service for network updates per QoS requirements.&#10;&#10;%The interaction of software components have a greater weight in NFV context, which may lead to stochastic-like behavior &#10;&#10;%At present, certain routing algorithms (including $k$ Edge-Disjoint) are based on the shortest path (SP) problem solution \cite{wood_toward_2015}. However, the method proposed by Wood et al. is generic and valuable only in the case of request arrival, and do not consider certain additional important requirements, such as removal or priorities of requests. &#10;&#10;%Several approaches for efficient SP-based QoS routing have been recently proposed in \cite{buchbinder_improved_2006}, where the authors introduce and analyze a centralized algorithm for an online scheduling and routing of arbitrary sequence of communication requests. &#10;&#10;%Unsplittable (single-path) assignment for each request of QoS routing is probably competitive with the best possible splittable (multipath assignment).&#10;&#10;The work by Delaet \textit{et al.}~[4] introduced the Make\&amp;amp;Activate-Before-Break &#10;approach for seamless&#10;route update in SDN. The authors described in a~high-level the multicasting-based &#10;update, which we&#10;employ in this work. Also, they introduced a~controller-based method for &#10;verifying the correctness&#10;of a~new route before the traffic redirection. Dinitz \textit{et al.}~[16] &#10;extended the work~[4] to the general&#10;case of several dependent (via shared links) routes pairs. The routes update &#10;problem was proved to&#10;be NP-hard~\cite{17-aaa}. The authors of~[16] suggested the use of &#10;artificial intelligence (AI) methods for &#10;solving the problem. As a~basis for AI-based solutions, Dinitz &#10;\textit{et al.}\ proposed a dependence graph model describing the current&#10;state of the problem instance at any replacement stage. &#10;In addition, route readiness verification similar&#10;to that in~[4] was implemented in~[16] as a high-level network protocol.&#10;&#10;In this work, we investigate a different problem; we consider the route updates &#10;problem from a~QoS&#10;perspective and describe in high-level both the prediction and the update processes.&#10;&#10;\vspace*{-9pt}&#10;&#10;\section{Preliminaries and Definitions}&#10;&#10;\vspace*{-2pt}&#10;&#10;\noindent&#10;The basic system settings are as follows. &#10;For a~(route) sequence~$X$, we denote by~$x_i$ the $i$th element in it.&#10;In a~(directed) communication network, &#10;we are given a~route~$C$ from source~$s$ to destination~$d$. &#10;Additionally, we are given a~set of different new routes~$N_i$, each going from~$s$ &#10;to~$d$. We model each route as an ordered set of network nodes connected by network &#10;links. We assume that neither of the routes contains cycles. &#10;Each router in a~route matches a~packet from~$s$ to~$d$ &#10;and forwards the packet to the next router in order. After the update &#10;is complete, each router in the new route should forward the packets from~$s$ &#10;to~$d$ to the next router in order along the new route. &#10;&#10;In our work, we consider the route replacement problem as a~sequence of &#10;subroutes replacements.&#10;The routes replacement subsystem was in great detail described by Dinitz &#10;\textit{et al.} in~\cite{dinitz_dependence_2017}. We borrow&#10;from~[16] the relevant parts which we briefly describe here.&#10;&#10;\smallskip&#10;&#10;\noindent&#10;\textbf{Definition~1.} We  define a~subset from $a\in X$ to $b\in X$ of an ordered&#10;set~$X$, when $a$ precedes~$b$, as~a~subroute from~$a$ to~$b$, and denote such subroute by&#10;$[a,b]$.&#10;&#10;\smallskip&#10;&#10; &#10;&#10;\textbf{Subroutes.} The current route~$C$ subdivides each new route &#10;to~$k$~common subroutes (a~subroute may consist of one router in the simplest case) &#10;and $k-1$ noncommon subroutes. &#10;For illustration, see Fig.~1.&#10;In Fig.~1 and figures below, the current route is depicted&#10;in a~light grey color full nodes, connected with&#10;solid edges. The new route is depicted in white colored nodes, connected with&#10;dashed edges. The common nodes are depicted as shaded. &#10;If there are several new&#10;routes, the nodes of each route are filled with a~designating pattern. &#10;Additionally, for easier reading,&#10;when it is possible, we denote subroutes of some route~$X$ as~$X^\prime$, $X^{\prime\prime}$, &#10;etc. In other cases, a~subroute~$j$&#10;of a~new (current) route~$i$ is denoted as $N_j^i (C_i^j)$. &#10;Similarly, routers of some route~$X$ are denoted by~$r^\prime$,&#10;$r^{\prime\prime}$, etc.&#10;&#10; { \begin{center}  %fig1&#10;\vspace*{1pt}&#10; \mbox{%&#10; \epsfxsize=78.631mm &#10; \epsfbox{fre-1.eps}&#10; }&#10;&#10;&#10;\vspace*{3pt}&#10;&#10;&#10;\noindent&#10;{{\figurename~1}\ \ \small{Route $C$ with two possible new routes sharing a~link}}&#10;\end{center}&#10;}&#10;&#10;\vspace*{6pt}&#10;&#10;&#10;&#10;&#10;&#10;&#10;In the example in Fig.~1, &#10;noncommon new subroutes &#10;of route~$N_1$ are denoted by~$N^1_1=[s,r_2]$ and~$N^2_1=[r_2,d]$, while the noncommon new &#10;subroutes of~$N_2$ are denoted by~$N^1_2=[s,r_1]$, $N^2_2=[r_1,r_3]$, &#10;$N^3_2=[r_3,r_2]$, and~$N^4_2=[r_2,d]$. &#10;&#10;Note that in general, the order of common subroutes along~$C$ and along~$N$ &#10;can be different. See, for example, the common subroutes of~$C$ and~$N_2$ in &#10;%Figure \ref{fig:two_routes}.&#10;Fig.~1.&#10;&#10;\smallskip&#10;&#10;\noindent&#10;\textbf{Definition~2.} A~new noncommon subroute of~$N$ from router~$a$&#10;to router~$b$ is legitimate for update only if~$a$ precedes~$b$ on the route~$C$.&#10;&#10;\smallskip&#10;&#10;Definition~2 guides us on which subroutes can be launched without creating routing cycles in the&#10;network system. (See~[4] for details.)&#10;&#10;&#10;When an update of a~subroute~$N^\prime$ from router~$r$ to~$r^\prime$ is finished, &#10;the update flow goes along~$C$ from~$s$ to~$r$, continues along~$N^\prime$ up to~$r^\prime$, &#10;and finishes along~$C$ from~$r^\prime$&#10; to~$d$. &#10;For illustration, see the result of launching~$N^4_2$ in Fig.~2.&#10;&#10; { \begin{center}  %fig2&#10;\vspace*{-1pt}&#10; \mbox{%&#10; \epsfxsize=78.631mm &#10; \epsfbox{fre-2.eps}&#10; }&#10;&#10;&#10;\vspace*{3pt}&#10;&#10;&#10;\noindent&#10;{{\figurename~2}\ \ \small{$N^4_2$ was launched}}&#10;\end{center}&#10;}&#10;&#10;\vspace*{4pt}&#10;&#10;&#10; &#10;&#10; Note that launching a~currently nonlegitimate new subroute, for example,~$N^3_2$ &#10; in Fig.~1, is forbidden since it will form a~cycle &#10; resulting in packets circulating and overwhelming the network. &#10;&#10;\textbf{Dynamics of the system.}&#10;%\label{sec:dynamics} &#10;Dinitz \textit{et al.}\ performed a~detailed analysis on the dynamics of a~subroutes&#10;system. After an update of a~subroute is complete, the set of current subroutes~$C$ &#10;and the set&#10;of new subroutes~$N$ are recalculated. This may result in different system of subroutes. For example,&#10;see Fig.~2 where after the launch of $N^4_2$ from the example in Fig.~1, &#10;the sets of subroutes are&#10;recalculated. As a~result, we obtain different subroutes (for clarity, the previous labels are kept). See&#10;also~[16] for details and extensive analysis.&#10;&#10;\vspace*{-4pt}&#10;&#10;\subsection{Markov chain characterization of~the~network~states}&#10;&#10;\noindent&#10;We characterize execution of some (sub)route in the network by &#10;a~packet delay time between the (sub)route&amp;apos;s common sender and common destination &#10;routers as well the probability of a~packet drop. Let us for now define our &#10;network routing model (conceptual model) informally in the following terms. &#10;Delay of a~packet is obtained using a~physical delay and the total processing &#10;time in the router. We consider that transmission of packets in &#10;a~network can have a~random behavior, caused by the random character of both, &#10;the input, and possible loss of packets. There we are interested in &#10;a~probabilistic model, namely, a~Markov model. In order to fully characterize &#10;the network as an~MC, the internal state of each router &#10;(and, in particular, the buffer occupancies), as well as the characteristics&#10; of all flows, need to be expressed as states in the chain. &#10;&#10;However, such approach would result in an enormous and intractable number of states. &#10;Therefore, to simplify these computations, let us characterize the delay time as &#10;an abstract variable~$t$. This abstract variable can be interpreted in different ways, &#10;e.\,g., the current processing queue length and a~packet transmission rate of the link, &#10;or possibly a~fixed value, such as an interval between the beginning of &#10;a~packet transmission after being processed in some node and the end of processing &#10;at the next node. &#10;&#10;We describe the functioning of the network in the transmission of packets &#10;as transitions of a~discrete-time MC (DTMC). The state space corresponds to the set &#10;of nodes such that &#10;the transmission of a~packet from a~node that has finished processing the packet &#10;to the next node corresponds to the transition of the chain to the next state.&#10;&#10;&#10;Discrete-time MC is defined as a~tuple $D\linebreak =(S, s_0, P)$. In the tuple, $S$ is &#10;the finite set of states, $s_0\in S$ is the initial&#10;state, $P:S \times S \rightarrow [0, 1]$ is the transition probability matrix in &#10;which $\forall s\in S$, $\sum\nolimits_{s&amp;apos; \in S} P(s,s&amp;apos;) = 1$. &#10;For any two states $s, s&amp;apos; \in S$, if $P(s,s&amp;apos;)&amp;gt;0$, then~$s&amp;apos;$ is the successor of~$s$. &#10;For a~subset of states $T \subseteq S$, the probability of moving from a~state~$s$ &#10;to any state $t \in T$ in a~single step is denoted by $P(s, T)$ and is given by &#10;$P(s,T)=\sum\nolimits_{t \in T} P(s, t)$. &#10;%The row $P(s,:)$, in the transition matrix $P$, contains the probabilities of moving from $s$ to its successors, while the column $P(:, s)$ contains the probabilities of entering the state $s$ from any other state.&#10;&#10;\vspace*{-6pt}&#10;&#10;\subsection{Verification syntax}&#10;&#10;\noindent&#10;For implementation of our PCTL-based model, we use PRISM~--- &#10;probabilistic model checker~\cite{kwiatkowska_prism_2011}. There, we follow &#10;PRISM property specification language. Here, we briefly describe the essential &#10;syntax while more details can be found in~\cite{noauthor_prism_nodate}.&#10;&#10;Given a property~$\Psi$, we say that~$\Psi$ is true with probability~$p$ &#10;and write that as&#10;$P_p [ \Psi ]$. If the probability~$p$ is unknown, PRISM allows, for DTMC, &#10;writing properties queries of the form $P_{=?}[ \Psi ]$, meaning &#10;``what is the probability that~$\Psi$ is true?&amp;apos;&amp;apos;. Additionally, it is possible &#10;to use a~time bound and write properties queries such as &#10;$P_{=?}[F^{\leq T} \Psi]$, meaning ``what is the probability that~$\Psi$ &#10;is true after less than~$T$~steps?&amp;apos;&amp;apos;. At last, it is possible to compute &#10;properties such as expected time or expected number of steps. &#10;For example, $R_{=?}[F \Psi]$, meaning ``what is the expected number of &#10;steps until $\Psi$ is true?&amp;apos;&amp;apos;. &#10;%\section{Model Settings}&#10;%, and a subroute of route $X$ from router $a$ to router $b$ is specified by $[a,b]_X$&#10;&#10;%When a new subroute of $N$ that is scheduled to update a current sub-route of $C_i$ is launched, the route $C$ is updated such that the updated sub-route is replaced by launched sub-route, and the new sub-route is now part of the current route $C$.&#10;&#10;\setcounter{figure}{3}&#10;\begin{figure*}[b] %fig4&#10;\vspace*{-6pt}&#10; \begin{center}&#10; \mbox{%&#10; \epsfxsize=149.177mm &#10; \epsfbox{fre-3.eps}&#10; }&#10; \end{center}&#10;\vspace*{-9pt}&#10;&#10; \Caption{New routes~$"/>
      <text value="N_1"/>
      <formula id="id5" value="$~(\textit{a}) and $"/>
      <text value="N_2"/>
      <formula id="id6" value="$~(\textit{b}) and&#10; MC states for~$"/>
      <text value="N_1"/>
      <formula id="id7" value="$~(\textit{c}) &#10;and~$"/>
      <text value="N_2"/>
      <formula id="id8" value="$~(\textit{d})}&#10; \label{fig:routes_dtmc_example}&#10;\end{figure*}&#10;&#10;&#10;&#10;\vspace*{-6pt}&#10;&#10;\section{Prediction of Preferred Update}&#10;%\section{Prediction of Preferred Update}&#10;\label{sec:dtmc}&#10;&#10;\noindent&#10;The states of a~DTMC describe the nodes in the new route and the transition &#10;probabilities in the chain represent the possible delay or &#10;a~packet loss in the routers along the new route. The&#10;states are defined as &#10;$\{s_1, \ldots , s_n\}$ where~$n$ is the number&#10;  of nodes in the new route. &#10;The network achieves the state~$s_i$ if a packet has reached the $i$th node. &#10;For example, in Fig.~3, the self-transition &#10;edge represents the probability for a~delay due to packet loss, rules installation &#10;at the router, or congestion on the router-controller link, while the &#10;forward transition edge represents the probability for &#10;a~successful transition to the next state. These probabilities can be estimated &#10;from network statistics (see, for example,~\cite{hogan_stochastic_2017}). &#10;The labels on edges are the probability values, when edge has no label&#10; means probability~1.&#10; &#10; The initial probability distribution of states is given by the vector~$P_0$ of size~$n$. &#10;We can determine the prob-\linebreak\vspace*{-12pt}&#10; &#10; %\linebreak\vspace*{-12pt}&#10;&#10;{ \begin{center}  %fig3&#10;\vspace*{-0.5pt}&#10;  \mbox{%&#10; \epsfxsize=77.518mm &#10; \epsfbox{fre-4.eps}&#10; }&#10;&#10;&#10;\end{center}&#10;&#10;\vspace*{-3pt}&#10;&#10;\noindent&#10;{{\figurename~3}\ \ \small{Probability as a~function of number of steps to update routes~$N_1$~(\textit{1})&#10; and~$N_2$~(\textit{2})}}&#10;}&#10;&#10;\vspace*{12pt}&#10;&#10;&#10;&#10;\noindent&#10;ability that a~particular route delays the update process &#10;by~$k$, that is, the number of steps required for a~successful update is given by &#10;$p(k)=P_0 P^k$. Using this characteristic, which is, in fact, the &#10;probability distribution of the number of steps $P(k &amp;lt; x)$, one can &#10;calculate various properties like average delay time for the new route, &#10;maximum or minimum number of steps to update, etc.&#10; &#10; Consider the example illustrated in Fig.~4. &#10;Figure~4\textit{a} illustrates the current route~$C$ and a candidate new route~$N_1$. &#10;Figure~4\textit{b} shows the same current route~$C$ with another candidate &#10;new route~$N_2$. &#10;Figures~4\textit{c} and~4\textit{d} &#10;show the MCs for new routes~$N_1$ and~$N_2$, accordingly, with given transition &#10;probabilities.&#10;&#10;During the update process, packets are sent along the current and the new routes. &#10;Since the new route is\linebreak\vspace*{-9.5pt}&#10;&#10;\columnbreak&#10;&#10;\noindent&#10; not operational yet, packets can be delayed due to &#10;congestion on certain nodes or due to switch configurations. &#10;%&#10;For example, if routing rules have not yet been installed in some switch, then an &#10;arriving packet is sent to the controller~\cite{onf_openflow_2015}. The controller &#10;then decides reactively on further actions whether to install an appropriate rule &#10;for the packet. Also, the controller may be busy with other work and not respond &#10;immediately. Those packet processing actions may delay the update process. &#10;In the case buffer becomes full, for example, if the network is being congested, &#10;packets may be dropped. There, the transition to the next state during the &#10;update process depends on the likelihood of a~delay or a~loss of a~packet in the &#10;current state. &#10;&#10;In the example, the number of steps required for launching~$N_2$ is smaller than &#10;the number of steps required for launching~$N_1$. However, due to a higher likelihood &#10;of delays along the route~$N_2$, it is possible that~$N_1$ is preferred having &#10;a~higher probability for a~successful update. The network administrator may ask &#10;which new route is recommended for the update process, considering the expected &#10;number of steps required for the update. &#10;%&#10;That is, updating paths requires the operator to decide &#10;on the possible choice of a~subroute for the next step. &#10;One should consider the possibility of including a~decision tool augmenting the &#10;controller during route updates. &#10;&#10;There were many attempts to use the LP/ILP &#10;approach, as it was already mentioned above (see, e.\,g.,~\cite{juttner_lagrange_2001}), &#10;but they have encountered the same difficulties, especially when taking &#10;into account online implementation. We show that it is possible to describe &#10;the routing process as DTMC. Thus, taking into consideration~$O(n^3)$ worst case &#10;computation complexity, we consider using the ``design via verification&amp;apos;&amp;apos; &#10;mentioned above based on PCTL verification, similar to the one used in &#10;PRISM~\cite{kwiatkowska_prism_2011}.&#10;&#10;&#10;We have calculated the probability for a~successful update as a~function of &#10;number of steps for routes~$N_1$ and~$N_2$ from the example in &#10;Fig.~\ref{fig:routes_dtmc_example}. See Fig.~3 &#10;where this function is shown. Curve~\textit{1}&#10;represents the plot for~$N_1$ and curve~\textit{2} represents&#10; the plot for~$N_2$. &#10;&#10;Observe that after~20~steps, both new routes will be launched with probability~1 &#10;which can be written as &#10;$$&#10;P_{1}\left[F^{&amp;gt;20}N_1\right]=P_{1}\left[F^{&amp;gt;20}N_2\right]=1\,.&#10;$$&#10;The expected number of steps required for~$N_1$ is smaller than the required for~$N_2$:&#10;$$&#10;R \left[F~N_1\right] &amp;lt; R \left[F~N_2\right]\,.&#10;$$&#10;However, the probability for successfully updating in less than~15~steps &#10;is higher for route~$N_2$ ($0.55 \pm 0.040$ for~$N_1$ and &#10;$0.717 \pm 0.036$ for~$N_2$, based on~99\% confidence level):&#10;$P_{0.717 \pm 0.036}\left[F^{\leq 15} N_2 \right].$&#10;&#10;\vspace*{-6pt}&#10;&#10;&#10;\section{Route Updates per~Quality~of~Service}&#10;\label{sec:updates_qos}&#10;&#10;\vspace*{-2pt}&#10;&#10;\noindent&#10;In this section, we show algorithm that we propose for various settings. &#10;First, we show an enhancement for the sequential update algorithm &#10;from~\cite{delaet_seamless_2015}, which during the update process decides on &#10;preferred subroute from the set of possible subroutes as part of QoS requirements. &#10;In the multicast-based update, several methods were proposed &#10;in~\cite{delaet_seamless_2015} for eliminating duplicated packets. &#10;In the case the common destination router is not able to immediately eliminate &#10;duplicated packets, the algorithm begins the update from the end, &#10;ensuring a~correct update process~[4].&#10;&#10;&#10;&#10;\begin{algorithm*} %alg1&#10; \setlength{\algowidth}{100mm}&#10; \setlength{\hsize}{\algowidth}&#10; \caption{Update per QoS Algorithm}&#10; \label{alg:update_per_qos}&#10;&#10;%\hrule&#10;%\vspace*{2pt}&#10;%\centerline&#10;%{\textbf{Algorithm~1:} Update per QoS Algorithm}\par&#10;&#10;%\vspace*{2pt}&#10;&#10;%\hrule&#10; \small&#10; &#10; %\Input&#10; {directed graph $"/>
      <text value="G"/>
      <formula id="id9" value="$} &#10; &#10; \BlankLine&#10; \tcc{$"/>
      <text value="A"/>
      <formula id="id10" value="$ is a collection of nodes} $A \leftarrow$ choose nodes from $G$ with in-degree $0$ \\&#10; &#10; \Repeat {out-degree of node $"/>
      <text value="N^t_i &amp;gt; 0"/>
      <formula id="id11" value="$}&#10; {&#10; \ForEach{$v \in A$ \label{alg:inner_loop}}&#10; {&#10; calculate $R[F~v]$ \\&#10;% calculate the expected QoS for this node as described in Section \ref{sec:updates_qos} \\&#10; }\label{alg:end_inner_loop}&#10; &#10;% $"/>
      <text value="N^t_i"/>
      <command value="\leftarrow"/>
      <formula id="id12" value="$ choose the node that maximizes QoS \label{alg:choose_qos}\\ &#10; $"/>
      <text value="N^t_i"/>
      <command value="\leftarrow"/>
      <command value="\argmax">
        <braces>
          <text value="_"/>
        </braces>
        <braces>
          <braces>
            <text value="{}"/>
            <text value="v"/>
          </braces>
        </braces>
        <braces/>
        <braces>
          <text value="(R"/>
        </braces>
        <braces/>
        <braces>
          <text value="F v"/>
        </braces>
        <braces/>
        <braces>
          <text value=")"/>
        </braces>
      </command>
      <formula id="id13" value="$ \label{alg:choose_qos} \\&#10; launch $"/>
      <text value="N^t_i"/>
      <formula id="id14" value="$ \\&#10; update $"/>
      <text value="C"/>
      <formula id="id15" value="$ accordingly \\&#10; merge any new and common subroutes as described in section~3 \\ &#10; $"/>
      <text value="A"/>
      <command value="\leftarrow"/>
      <formula id="id16" value="$ choose nodes neighboring to $"/>
      <text value="N^t_i"/>
      <formula id="id17" value="$ \\ &#10; }&#10; &#10; \BlankLine &#10; &#10;\end{algorithm*}&#10;&#10;&#10;&#10;&#10;&#10; &#10;%The algorithm starts from any node with in-degree 0 since it means that such node has no precedence dependence. Updating is completed when the algorithm arrives to a node with out-degree zero, which would be the last subroute to launch.&#10;&#10;&#10;After that, we show an algorithm that chooses the subroutes for update arbitrary, &#10;assuming that the common destination node will not leak duplicated packets. &#10;However, the packets sending rate along the new subroute need to be temporarily limited~[4].&#10;&#10;At last, we present a supplementing algorithm that suggests which subroutes can &#10;be updated in parallel.&#10;&#10;%The set of common nodes for each pair of routes subdivides the routes to sub-routes relatively to each other. &#10;&#10;\vspace*{12pt}&#10;&#10;\subsection{Sequential update}&#10;&#10;\noindent&#10;Let us begin the update from the end, namely, from the last alternative &#10;subroute of any new route. Provably, this prevents the formation of &#10;cycles~\cite{delaet_seamless_2015}. In order to represent all possible choices &#10;of a~path from a current state of the update process to the end of the update process, &#10;we propose to use a directed graph which nodes are the new, legitimate for launching, &#10;subroutes of the network. The edges of the graph represent a~legal order of launching &#10;new subroutes. Each path in this graph from a~current node to the last node in &#10;the path represents a~legal combination of chosen subroutes. The update process is &#10;continued as long as there is a~possible node to transition to. &#10;&#10;Let us examine the two possible new routes~$N_1$ and~$N_2$ that can replace the &#10;current route~$C$ from the example depicted in Fig.~1. &#10;The new route~$N_1$ is composed of~$N^1_1$ and~$N^2_1$, while the new route~$N_2$ &#10;composed of~$N^1_2$, $N^2_2$, $N^3_2$, and~$N^4_2$. Starting from the end, the only &#10;new subroutes that are allowable to launch are~$N^2_1$ and~$N^4_2$. &#10;Assume that based on the DTMC calculations performed as described in section~4, &#10;the subroute~$N^4_2$ is chosen for update. After the update of the subroute is &#10;complete, the current route~$C$ is composed of not updated yet part of the old &#10;route and~$N^4_2$. See Fig.~2 where the change in~$C$ &#10;is depicted.&#10;&#10;After the subroute~$N^4_2$ is launched, we arrive at a~smaller problem in which &#10;less subroutes are left to update. Due to dynamics of the system &#10;(see section~3), some new subroutes can merge into a~single new subroute.&#10;See Fig.~2 where after~$N^4_2$ was launched, the &#10;new subroutes~$N^3_2$ and~$N^2_2$ are merged into a~single subroute. Now, one &#10;can launch either~$N^1_1$ or~$N^2_2$ merged with~$N^3_2$. Assume that we choose to &#10;launch~$N^1_1$, which launch&#10; finishes the update. The route~$C$ updated to~$N^1_1$ &#10;and~$N^4_2$. See Fig.~5 illustrating that.&#10;&#10;&#10;Figure~6 shows the directed graph that represents &#10;the possible update sequences. Initially, the subroutes that %\linebreak\vspace*{-12pt}&#10; are legal &#10;for launch are~$N^2_1$ and~$N^4_2$. As such, these are&#10;the only subroutes that&#10; have in-degree~0. Launching~$N^3_2$&#10; is forbidden; hence, there is no node in the &#10; graph~$G$ that represents this subroute. After launching~$N^4_2$, we\linebreak\vspace*{-12pt}&#10; &#10; \setcounter{figure}{4}&#10;&#10;{ \begin{center}  %fig5&#10;\vspace*{12pt}&#10; \mbox{%&#10; \epsfxsize=78.631mm &#10; \epsfbox{fre-5.eps}&#10; }&#10;&#10;&#10;\vspace*{3pt}&#10;&#10;&#10;\noindent&#10;{{\figurename~5}\ \ \small{$N^1_1$ was launched}}&#10;\end{center}&#10;}&#10;&#10;\vspace*{6pt}&#10;&#10;{ \begin{center}  %fig6&#10;\vspace*{1pt}&#10; \mbox{%&#10; \epsfxsize=36.428mm &#10; \epsfbox{fre-6.eps}&#10; }&#10;&#10;&#10;\end{center}&#10;&#10;&#10;\noindent&#10;{{\figurename~6}\ \ \small{Graph &#10;representation for possible update paths for routes update example from Fig.~1}}&#10;&#10;}&#10;&#10;%\vspace*{6pt}&#10;&#10;\noindent&#10;  can &#10; proceed by launching~$N^1_1$ or~$N^2_2$. However, if~$N^2_1$ was launched first, &#10; it would be forbidden to launch~$N^2_2$ since it shares a~common edge with~$N^2_1$. &#10; This is reflected in the graph~$G$ by not having a~directed edge from the&#10;  node~$N^2_1$ to the node~$N^2_2$. We finish the update process&#10; by arriving either &#10; to~$N^1_1$ or to~$N^1_2$. Notably, these nodes have out-degree~0.&#10;&#10; Algorithm~1 updates subroutes according to calculated QoS for each new subroute, by&#10; choosing at each step the new subroute that maximizes QoS.&#10;&#10;&#10;The algorithm starts by selecting the initial set of subroute nodes. &#10;These are nodes with in-degree~0. The algorithm continues traversing the graph up &#10;to arrival at a node with out-degree~0 which would be the last subroute to launch. &#10;The inner loop at lines~\ref{alg:inner_loop}--\ref{alg:end_inner_loop} &#10;calculates the QoS for each neighboring node. Afterward, at &#10;line~\ref{alg:choose_qos}, the algorithm chooses the node that maximizes QoS. &#10;Then launches this node and updates the route~$C$, accordingly (see &#10;Figs.~1--5 for illustration). &#10;Afterward, the algorithm selects the next neighboring nodes.&#10;&#10;After execution of Algorithm~1, the resulting new route maximally complies QoS &#10;requirements.&#10;&#10;%\vspace*{12pt}&#10;&#10;\subsection{Arbitrary subroutes selection} &#10;%\label{sec:arbitrary}&#10;&#10;%\vspace*{-12pt}&#10;&#10;\noindent&#10;In this subsection, we assume that immediate duplicate packets elimination is possible. &#10;It may be that some of the subroutes are not ready for an update yet. &#10;Thus, meanwhile, the administrator may want to proceed with the update process &#10;to other subroutes or see possible variations of the update. &#10;For such scenario, we provide an algorithm which can select a~subroute for &#10;update arbitrary and continue the update process from there. &#10;We create a~forest graph of all possible update combinations from which the &#10;desired update sequence can be chosen. &#10;{\looseness=1&#10;&#10;}&#10; &#10;&#10;&#10;Figure~7 shows all possible combinations from example &#10;in Fig.~1. Noticeable, as mentioned earlier, some\linebreak\vspace*{-12pt}&#10;&#10;{ \begin{center}  %fig7&#10;\vspace*{1pt}&#10;  \mbox{%&#10; \epsfxsize=71.694mm &#10; \epsfbox{fre-7.eps}&#10; }&#10;&#10;&#10;\end{center}&#10;&#10;&#10;\noindent&#10;{{\figurename~7}\ \ \small{Forest graph representing execution combinations for example from &#10; Fig.~1}}&#10;}&#10;&#10;\vspace*{12pt}&#10;&#10;&#10;\noindent&#10; combinations &#10;exhibit fewer steps, though possible that its QoS compliance is worse than others.&#10;&#10;&#10;&#10;Algorithm~2 starts by iterating over all roots of the forest graph and &#10;calculating QoS using Algorithm~1 each tree. Afterward, launch the update &#10;of the tree that maximizes QoS.&#10;&#10;\begin{algorithm*} %alg2&#10;\setlength{\algowidth}{100mm}&#10; \setlength{\hsize}{\algowidth}&#10; \caption{Arbitrary Selection Update}&#10; \label{alg:arbitrary_update}&#10; \small&#10; &#10;% \Input&#10;{directed graph $"/>
      <text value="G"/>
      <formula id="id18" value="$} &#10; &#10; %\BlankLine&#10; &#10; $A_0 \leftarrow$ choose nodes from $G$ with in-degree $0$ \\&#10; $Q \leftarrow \{\}$ \\&#10; &#10; \BlankLine&#10; \tcc{iterate over all roots of trees in the forest $"/>
      <text value="G"/>
      <formula id="id19" value="$}&#10; \ForEach{$"/>
      <text value="v_r"/>
      <command value="\in">
        <braces>
          <text value="A_0"/>
        </braces>
      </command>
      <formula id="id20" value="$}&#10; {&#10; $"/>
      <text value="q"/>
      <command value="\leftarrow"/>
      <formula id="id21" value="$ get the expected QoS using Algorithm~1 for $"/>
      <text value="v_r$ "/>
      <escaped value="\"/>
      <escaped value="\"/>
      <text value="&#10; $Q"/>
      <command value="\leftarrow">
        <braces>
          <text value="Q"/>
        </braces>
      </command>
      <command value="\cup"/>
      <text value="q"/>
      <command value="\rightarrow"/>
      <command value="\mathrm">
        <braces>
          <braces>
            <text value="{}"/>
            <text value="root"/>
          </braces>
        </braces>
        <braces/>
      </command>
      <formula id="id22" value="$ \\&#10; }&#10;&#10; \BlankLine&#10; $q_{\max} \leftarrow \max_{\mathrm{QoS}}(Q)$ \\&#10; launch maximizing QoS update order in $\mathrm{root}=Q[q_{\max}]$ \\ &#10; &#10; &#10;\end{algorithm*}&#10;&#10;&#10;%\columnbreak&#10;&#10;\vspace*{12pt}&#10;&#10;&#10;&#10;&#10;&#10;\subsection{Parallel update}&#10;&#10;\noindent&#10;In certain cases, it is possible to update in parallel several subroutes &#10;and, as such, decrease update time. However, launching subroutes in parallel &#10;is not always possible&#10; since subroute may share a~link and, thus, leads to congestion &#10;during the update process, close a~cycle, or lead to an inconsistent state of the &#10;system. In~\cite{delaet_seamless_2015}, it was shown that two new subroutes~$N&amp;apos;$ &#10;from~$a$ to~$b$ and~$N&amp;apos;&amp;apos;$ from~$c$ to~$d$ can be launched in parallel only if~$c$ &#10;succeeds~$b$ or~$a$ succeeds~$d$.&#10;&#10;&#10;&#10;%\begin{proposition}&#10;% Let $N&amp;apos;$ from $a$ to $b$ and $N&amp;apos;&amp;apos;$ from $c$ to $d$ be two legitimate new subroutes. $N&amp;apos;$ and $N&amp;apos;&amp;apos;$ can be launched in parallel only if $c$ succeeds $b$ or $a$ succeeds $d$.&#10;%%Two subroutes that are each legitimate can be launched in parallel only if they share at most one common subroute.&#10;%\end{proposition}&#10;%\begin{proof}&#10;% \textbf{Direction}: $\Rightarrow$ Let $N&amp;apos;$ from router $a$ to $b$ and $N&amp;apos;&amp;apos;$ from router $c$ to $d$, be two new legitimate sub-routes. The only way for them to share more than one common sub-route is if $b$ succeeds $c$ on $C$. In such case, launching $N&amp;apos;$ will eliminate the part of $C$ from $c$ to $b$ with no proper connection from $b$ to $c$, which leaves the system in an inconsistent state. The same occurs if $N&amp;apos;&amp;apos;$ is launched. \\&#10;% \textbf{Direction}: $\Leftarrow$ Let $N&amp;apos;$ from router $a$ to $b$ and $N&amp;apos;&amp;apos;$ from router $c$ to $d$, be two new sub-routes, not necessary part of the same new route, such that $b$ precedes $c$ or $b=c$. If $a$ precedes $b$, than $N&amp;apos;$ is legal for launching independently of $N&amp;apos;&amp;apos;$. Similarly, if $c$ precedes $b$, than $N&amp;apos;&amp;apos;$ is legal for launching independently of $N&amp;apos;$. Thus, since $N&amp;apos;$ can be launched independently from $N&amp;apos;&amp;apos;$, they can be launched in parallel. Symmetric considerations lead to same result in case $a$ succeeds $d$.&#10;% &#10;%\noindent Generalization to more than two sub-routes is trivial.&#10;%\end{proof}&#10;&#10;&#10;&#10;\begin{algorithm*}[b] %[t] %alg3&#10;\setlength{\algowidth}{100mm}&#10; \setlength{\hsize}{\algowidth}&#10; \caption{Parallel Update}&#10; \label{alg:parallel_update}&#10; \small&#10; &#10; %\Input&#10; {weighted graph $"/>
      <text value="G_S"/>
      <formula id="id23" value="$} &#10; &#10; \BlankLine&#10; &#10; \While{there are still current subroutes to update}&#10; {&#10; $"/>
      <text value="A"/>
      <command value="\leftarrow"/>
      <formula id="id24" value="$ find maximum-weight independent set in $"/>
      <text value="G_S"/>
      <formula id="id25" value="$ \\&#10; &#10; \BlankLine &#10; \tcc{do in parallel} &#10; \ForEach{$N^t_i \in A$} &#10; { &#10; launch $N^t_i$ \\&#10; }&#10; }&#10; &#10; \vspace*{6pt}&#10; &#10;\end{algorithm*}&#10;&#10;We create a supplementary graph~$G_S$, in which nodes are the new legitimate &#10;for launching subroutes, and edges represent restrictions on parallel &#10;launching of subroutes. See Fig.~8 for illustration, &#10;depicting subroutes from example in Fig.~1 and their parallel &#10;restrictions. For example, $N^4_2$ and~$N^1_2$ can be launched in parallel since &#10;there is no edge connecting them.&#10;&#10;Clearly, any independent set of subroutes from the supplementary &#10;graph contains subroutes that can be launched in parallel. &#10;This can be further enhanced by setting QoS calculated values as weights &#10;on nodes of the graph and finding the subroutes that can be launched &#10;in parallel by finding a~maximum-weight independent set of the graph~$G_S$. &#10;Since~$G_S$ has few&#10; number of nodes (several tens), it is possible to find &#10;the&#10; maximum-weight independent set even by enumerating&#10; all possible independent &#10;sets~\cite{wu_review_2015} and comparing their total weights.&#10;{\looseness=-1&#10;&#10;&#10;&#10;{ \begin{center}  %fig8&#10;\vspace*{12pt}&#10;  \mbox{%&#10; \epsfxsize=36.666mm &#10; \epsfbox{fre-8.eps}&#10; }&#10;&#10;&#10;\end{center}&#10;&#10;&#10;\noindent&#10;{{\figurename~8}\ \ \small{Supplementary graph of the example in &#10; Fig.~1, showing which subroutes cannot be run in parallel}&#10;}}&#10;&#10;%\vspace*{12pt}&#10;&#10;&#10;&#10;} &#10;&#10;&#10;&#10;Important, the parallel method should not be launched on its own. &#10;For example, assume that at the first iteration of Algorithm~3, &#10;the independent sets of nodes are~$A_1$ and~$A_2$. Let us assume that~$A_1$ complies &#10;better to QoS demands than~$A_2$ and, thus, $A_1$ will be selected. &#10;Also, let us assume that~$B_1$ is the next independent set in the graph &#10;if~$A_1$ was selected and~$B_2$ if~$A_2$ was selected. &#10;Also, let us assume that~$B_1$ is&#10;the next independent set in the graph if~$A_1$ was selected and~$B_2$ if~$A_2$ &#10;was selected.&#10;It is possible that due to the dynamics of the system (see section~3), &#10;we could obtain overall higher QoS results if we initially launched the &#10;subroutes from the sets~$A_2$ and~$B_2$ afterwards than from the sets~$A_1$ and~$B_1$.&#10; &#10;&#10;Therefore, the graph that we create in this section for parallelization constraints &#10;is a~supplementary graph which must be used in conjunction with the graphs from &#10;previous sections. Optimal results will be obtained when used in conjunction with &#10;the forest graph from subsection~5.2.&#10;&#10;It is also important to note that, in the worst case, when there are &#10;no disjoint subroutes, the parallel method is reduced to the sequential &#10;method thought with a higher running time.&#10;&#10;\vspace*{-12pt} &#10;&#10;&#10;\section{Implementation}&#10;&#10;\noindent&#10;We implemented the update algorithms from~\cite{delaet_seamless_2015} as &#10;services for our QoS verification module. The update algorithm itself &#10;was not modified. In other words, we treated the update itself as &#10;an atomic action. The route updates&#10; algorithms are implemented as &#10;applications interacting with the northbound interface of an SDN controller. &#10;We used POX~\cite{kaur_network_2014} as a~platform for controller development and &#10;Mininet~\cite{lantz_network_2010} for network topology emulation. &#10;Figure~9 depicts the schematic arrangement of the &#10;functional elements. &#10;&#10;&#10;&#10;We created networks with topology of random graph and small-world features. &#10;During each simulation trial, a~pair of common source and destination nodes $(s,d)$ &#10;were selected. A~path connecting~$s$ and~$d$ was selected as a~current route and &#10;a~set of~4~new routes connecting $(s,d)$, to replace the current route, were &#10;selected, possibly with shared links among themselves and the current route. &#10;&#10;We considered latency due to the formed congestion as QoS demands for the update, &#10;implemented by forming congestion on randomly selected subroutes. Route &#10;update was executed by the update algorithm from~\cite{delaet_seamless_2015} for &#10;each pair of current and new routes. Further, one of the enhanced versions &#10;was executed, updating to the&#10; preferred combination of subroutes, by identifying &#10;the congested subroutes (e.\,g., by estimating latency).&#10;&#10;{ \begin{center}  %fig9&#10;\vspace*{8pt}&#10;  \mbox{%&#10; \epsfxsize=58.544mm &#10; \epsfbox{fre-9.eps}&#10; }&#10;&#10;\vspace*{3pt}&#10;&#10;&#10;\noindent&#10;{{\figurename~9}\ \ \small{Description of the system}&#10;}&#10;\end{center}}&#10;&#10;%\vspace*{12pt}&#10;&#10;&#10;&#10;%\vspace*{-45pt}&#10;&#10;\section{Concluding Remarks}&#10;&#10;\noindent&#10;The study in this paper illustrates a~feasibility of modeling and &#10;designing the route update process via verification using DTMC. The goal was to &#10;strengthen the network administrator involvement in management and decision &#10;making during route update. In the present model, the network administrator is able &#10;to consider network parameters such as packet losses, delay, communication &#10;rounds, flow table updates, congestion, and other inherent unreliabilities of &#10;the network. &#10;&#10;We extended the updating algorithm with the ability to compute QoS as the &#10;MC characteristics, where the MC corresponds to the states &#10;of the update process. Using this MC computation ability, it is &#10;possible to predict the expected number of steps (delay time) required to &#10;complete the update process. These prediction results allow the administrator &#10;to make a~decision whether a~new route can satisfy the user requirements per QoS &#10;or a~more reliable route will be selected.&#10;&#10;We provided sequential update algorithm and an arbitrary order algorithm &#10;when for the later, it is assumed that immediate duplicate packets elimination &#10;is possible. Further, we suggest a supplementary graph and algorithm for launching &#10;updates in parallel when it is possible.&#10;&#10;This paper proposes a~conceptual approach. In future research, we will focus &#10;on optimization of predictions supplementing the network administrator with &#10;a~powerful tool which will be able to enhance the update process &#10;with fine grained analysis of the network.&#10;&#10;\vspace*{-12pt}&#10;&#10;&#10;\Ack&#10;\noindent&#10;The first author has partially been supported by the &#10;Russian Foundation for Basic Research under grants RFBR 18-07-00669 and 18-29-03100. &#10;The second author has partially been supported by the Rita Altura Trust Chair in&#10;Computer Sciences; The Lynne and William Frankel Center for Computer&#10;Science.&#10;&#10;%\bigskip&#10;&#10;&#10;The authors thank Prof.\ Shlomi Dolev &#10;for his valuable input and Prof.\ Yefim Dinitz for his comments.&#10; &#10;\renewcommand{\bibname}{\protect\rmfamily References}&#10;&#10;%\vspace*{-6pt}&#10;&#10;\vspace*{-6pt}&#10;&#10;{\small\frenchspacing&#10;{\baselineskip=10.35pt&#10;\begin{thebibliography}{99}&#10;&#10;&#10;&#10;\bibitem{rao_sdn_2014}  %1&#10;\Aue{Rao, S.\,K.} 2014. SDN and its use-cases~--- NV and NFV:&#10;A~state-of-the-art survey. NEC Technologies India Ltd. 25~p.&#10;&#10;\bibitem{ghaznavi_service_2016}  %2&#10;\Aue{Ghaznavi, M., N.~Shahriar, R.~Ahmed, and R.~Boutaba}. 2016. &#10;Service function chaining simplified. {arXiv.org}. arXiv:1601.00751.&#10;&#10;\bibitem{hansson_logic_1994}  %3&#10;\Aue{Hansson, H., and B.~Jonsson}. &#10;1994. A~logic for reasoning about time and reliability. &#10;\textit{Form. Asp. Comput.} 6(5):512--535.&#10;&#10;\bibitem{delaet_seamless_2015}  %4&#10;\Aue{Delaet, S., S.~Dolev, D.~Khankin, S.~Tzur-David, and T.~Godinger}. &#10;2015. Seamless SDN route updates. \textit{IEEE 14th Symposium (International)&#10;on Network Computing and Applications}. IEEE. 120--125.&#10;&#10;\bibitem{frenkel_predicting_2017} &#10;\Aue{Frenkel, S., D.~Khankin, and A.~Kutsyy}. &#10;2017. Predicting and choosing alternatives of route updates per QoS VNF in SDN. &#10;\textit{IEEE 16th Symposium (International) on Network Computing and Applications}. &#10;IEEE. 1--6. &#10;&#10;\bibitem{devi_approach_2015} &#10;\Aue{Devi, G., and S.~Upadhyaya}. 2015. &#10;An approach to distributed multi-path QoS routing. &#10;\textit{Indian J.~Sci. Technol.} 8(20):1--14. &#10;doi: 10.17485/ijst/2015/v8i20/49253.&#10;&#10;\bibitem{egilmez_distributed_2012} &#10;\Aue{Egilmez, H.\,E., S.~Civanlar, and A.\,M.~Tekalp}. 2012. &#10;A~distributed QoS routing architecture for scalable video streaming over multi-domain &#10;OpenFlow networks. \textit{19th IEEE Conference (International) on Image Processing}.&#10;IEEE. 2237--2240.&#10;&#10;\bibitem{juttner_lagrange_2001} &#10;\Aue{Juttner, A., B.~Szviatovski, I.~Mecs, and Z.~Rajko}. 2001. &#10;Lagrange relaxation based method&#10;for the QoS routing problem. \textit{IEEE Conference on Computer Communications. &#10;20th Annual Joint Conference of the IEEE Computer and Communications Society&#10; Proceedings}. IEEE. 2:859--868.&#10;&#10;\bibitem{yu_efficient_2013} %9&#10;\Aue{Yu, Z., F.~Ma, J.~Liu, B.~Hu, and Z.~Zhang}. 2013. &#10;An efficient approximate algorithm for disjoint QoS routing.&#10;\textit{Math. Probl. Eng.} 2013:489149. 9~p. &#10;doi: 10.1155/2013/489149.&#10;&#10;\bibitem{foerster_survey_2016} &#10;\Aue{Foerster, K.-T., S.~Schmid, and S.~Vissicchio} 2016. &#10;A~survey of consistent network updates. \mbox{Arxiv.org}. \mbox{arXiv}:\linebreak 1609.02305.&#10;&#10;\bibitem{reitblatt_consistent_2011} &#10;\Aue{Reitblatt, M., N.~Foster, J.~Rexford, and D.~Walker}. &#10;2011. Consistent updates for software-defined networks: Change you can believe in! &#10;\textit{10th ACM Workshop on Hot Topics in Networks Proceedings}.&#10;New York, NY: ACM. Art.\ No.\,7. doi: 10.1145/2070562.2070569.&#10;&#10;\bibitem{hogan_stochastic_2017} &#10;\Aue{Hogan, M., and F.~Esposito}. &#10;2017. Stochastic delay forecasts for edge traffic engineering via Bayesian networks. &#10;\textit{IEEE 16th Symposium (International) on Network Computing and Applications}. &#10;IEEE. 1--4.&#10;&#10;\bibitem{mcgeer_safe_2012} %15&#10;\Aue{McGeer, R.} 2012. A~safe, efficient Update Protocol for Openflow Networks. &#10;\textit{1st Workshop on Hot Topics in Software Defined Networks Proceedings}. &#10;New York, NY: ACM. 12:61--66.&#10;\bibitem{mcgeer_correct_2013} &#10;\Aue{McGeer, R.} 2013. A~correct, zero-overhead protocol for network updates. &#10;\textit{2nd ACM SIGCOMM Workshop on Hot Topics in Software Defined Networking&#10;Proceedings}. New York, NY: ACM. 13:161--162.&#10;\bibitem{katta_incremental_2013} &#10;\Aue{Katta, N.\,P., J.~Rexford, and D.~Walker}. &#10;2013. Incremental consistent updates. \textit{2nd ACM SIGCOMM Workshop on Hot Topics &#10;in Software Defined Networking Proceedings}.&#10;New York, NY: ACM. 13:49--54.&#10;&#10;\bibitem{dinitz_dependence_2017}  %16&#10;\Aue{Dinitz, Y., S.~Dolev, and D.~Khankin}. &#10;2017. Dependence graph and master switch for seamless dependent routes &#10;replacement in SDN. \textit{IEEE 16th Symposium &#10;(International) on Network Computing and Applications}. IEEE. 1--7.&#10;&#10;\bibitem{17-aaa}&#10;\Aue{Amiri, S.\,A., S.~Dudycz, S.~Schmid, and S.~Wiederrecht}.&#10;2016. Congestion-free rerouting of flows&#10;on DAGs. \mbox{ArXiv}.org. arXiv:1611.09296.&#10;% [cs, math], Nov. 2016, arXiv: 1611.09296. [Online]. Available:&#10;%http://arxiv.org/abs/1611.09296&#10;&#10;\bibitem{kwiatkowska_prism_2011}  %17&#10;\Aue{Kwiatkowska, M., G.~Norman, and D.~Parker}. 2011. &#10;PRISM~4.0: Verification of probabilistic real-time systems. &#10;\textit{Computer aided verification}.&#10;Eds. G.~Gopalakrishnan and S.~Qadeer.&#10;Lecture notes in computer science ser. Springer.&#10;6806:585--591.&#10;&#10;\bibitem{noauthor_prism_nodate}  %18&#10;\Aue{Kwiatkowska, M., G.~Norman, and D.~Parker}. 2018. &#10;{PRISM manual}. Available at:&#10;{\sf http://www.\linebreak prismmodelchecker.org/manual/}&#10;(accessed December~10, 2018).&#10;&#10;\bibitem{onf_openflow_2015} %19&#10;{Open Networking Foundation}. 2015. &#10;OpenFlow Switch Specification Ver~1.5.1. &#10;&#10;&#10;\bibitem{wu_review_2015}  %20&#10;\Aue{Wu, Q., and J.-K.~Hao}. 2015. &#10;A~review on algorithms for maximum clique problems. &#10;\textit{Eur. J.~Oper. Res.} 242(3):693--709.&#10;&#10;\bibitem{kaur_network_2014}  %21&#10;\Aue{Kaur, S., J.~Singh, and N.\,S.~Ghumman}. 2014. &#10;Network programmability using POX controller. &#10;\textit{Conference (International) on Communication, Computing and Systems}.&#10;138.&#10;&#10;\bibitem{lantz_network_2010}  %22&#10;\Aue{Lantz, B., B.~Heller, and N.~McKeown}. 2010. &#10;A~network in a~laptop: Rapid prototyping for software-defined networks. &#10;\textit{9th ACM SIGCOMM Workshop on Hot Topics in Networks Proceedings}. &#10;New York, NY: ACM.  Art.\ No.\,19. doi: 10.1145/1868447.1868466.&#10;\end{thebibliography} } }&#10;&#10;\end{multicols}&#10;&#10;\vspace*{-9pt}&#10;&#10;\hfill{\small\textit{Received October 9, 2018}}&#10;&#10;\vspace*{-22pt}&#10;&#10;\Contr&#10;&#10;\vspace*{-3pt}&#10;&#10;\noindent&#10;\textbf{Frenkel Sergey L.} (b.\ 1951)~--- &#10;Candidate of Science (PhD) in technology, associate professor, &#10;senior scientist, Institute of Informatics Problems, Federal Research Center &#10;``Computer Sciences and Control&amp;apos;&amp;apos; of the Russian Academy of Sciences, &#10;44-2~Vavilov Str., Moscow 119333, Russian Federation; \mbox{fsergei51@gmail.com}&#10;&#10;\vspace*{1pt}&#10;&#10;\noindent&#10;\textbf{Khankin D.} (b.\ 1983)~--- MSc, doctorate student, Department of Computer &#10;Science, Ben-Gurion University of the Negev, Beer-Sheva 84105, Israel; &#10;\mbox{danielkh@post.bgu.ac.il}&#10;&#10;\vspace*{4pt}&#10;&#10;\hrule&#10;&#10;\vspace*{2pt}&#10;&#10;\hrule&#10;&#10;\vspace*{-7pt}&#10;&#10;%\newpage&#10;&#10;%\vspace*{-28pt}&#10;&#10;\def\tit{НЕПРЕРЫВНЫЕ ОБНОВЛЕНИЯ МАРШРУТА В~SDN С~ИСПОЛЬЗОВАНИЕМ ПРОВЕРКИ СООТВЕТСТВИЯ &#10;КАЧЕСТВУ~ОБСЛУЖИВАНИЯ$"/>
      <text value="^*"/>
      <formula id="id26" value="$\\[-7pt]}&#10;&#10;\def\titkol{Непрерывные обновления маршрута в~SDN с~использованием проверки соответствия &#10;качеству обслуживания}&#10;&#10;\def\aut{С.\,Л.~Френкель$"/>
      <text value="^1"/>
      <formula id="id27" value="$, Д.~Ханкин$"/>
      <text value="^2"/>
      <formula id="id28" value="$\\[-7pt]}&#10;&#10;\def\autkol{С.\,Л.~Френкель, Д.~Ханкин}&#10;&#10;{\renewcommand{\thefootnote}{\fnsymbol{footnote}} \footnotetext[1]&#10;{Работа была частично поддержана РФФИ (гранты 18-07~00669 и~18-29-03100), &#10;а~также Rita Altura Trust Chair in&#10;Computer Sciences; The Lynne and William Frankel Center for Computer&#10;Science.}}&#10;&#10;&#10;&#10;\titel{\tit}{\aut}{\autkol}{\titkol}&#10;&#10;\vspace*{-22pt}&#10;&#10;\noindent&#10;$^1$Институт проблем информатики Федерального исследовательского центра &#10;&amp;lt;&amp;lt;Информатика и~управление&amp;gt;&amp;gt;\linebreak&#10;$\hphantom{^1}$Российской академии наук&#10;%, fsergei51@gmail.com &#10;&#10;\noindent&#10;$^2$Университет им.\ Бен-Гуриона в Негеве, Беэр-Шева, Израиль&#10;%, danielkh@post.bgu.ac.il &#10;&#10;\vspace*{1pt}&#10;&#10;\def\leftfootline{\small{\textbf{\thepage}&#10;\hfill ИНФОРМАТИКА И ЕЁ ПРИМЕНЕНИЯ\ \ \ том\ 12\ \ \ выпуск\ 4\ \ \ 2018}&#10;}%&#10; \def\rightfootline{\small{ИНФОРМАТИКА И ЕЁ ПРИМЕНЕНИЯ\ \ \ том\ 12\ \ \ выпуск\ 4\ \ \ 2018&#10;\hfill \textbf{\thepage}}}&#10;&#10;\vspace*{-1pt}&#10;&#10;&#10; &#10;\Abst{В программно-определяемой сети (SDN~--- software-defined networking) &#10;уровень управ\-ле\-ния &#10;и~уровень данных разделены. Это обеспечивает высокую гибкость эксплуатации, &#10;предоставляя абстракции для управления сетью приложений &#10;и~возможность непосредственного программирования маршрутов.&#10;Однако из-за изменений топологии, процедуры обслуживания или происходящих &#10;сбоев иногда необходима реконфигурация и~обновление сети. &#10;В~предлагаемом сценарии рассматривается текущий маршрут~$"/>
      <text value="C"/>
      <formula id="id29" value="$&#10;и~набор возможных новых маршрутов~~$"/>
      <text value="N_i"/>
      <formula id="id30" value="$, где для замены текущего &#10;маршрута требуется &#10;один из\linebreak\vspace*{-12pt}}&#10;&#10;\Abstend{новых маршрутов. Существует вероятность того, что новый маршрут~$"/>
      <text value="N_i"/>
      <formula id="id31" value="$ &#10;окажется длиннее некоторого другого нового маршрута~$"/>
      <text value="N_j"/>
      <formula id="id32" value="$, но при этом~$"/>
      <text value="N_i"/>
      <formula id="id33" value="$ &#10;будет более надежным и~он будет обновляться быстрее или работать лучше &#10;после обновления с~точки зрения требований качества обслуживания (QoS~---&#10;quality of service). Принимая &#10;во внимание случайный характер функционирования сети, авторы дополнили недавно &#10;предложенный алгоритм обновления маршрута Delaet с~соавт.\ методом оценки соблюдения &#10;требований QoS во время непрерывного обновления маршрута, основанным на &#10;использовании цепей Маркова. При этом, во-пер\-вых, предлагается расширить &#10;алгоритм передачи пакетов по выбранному маршруту, сравнивая процесс обновления &#10;для возможных альтернатив маршрута. Во-вто\-рых, предлагается несколько &#10;способов выбора комбинаций предпочтительных отрезков путей новых маршрутов, &#10;что приводит к оптимальному в~смысле соответствия QoS маршруту.}&#10;&#10;&#10;\KW{программно-определяемые сети; цепи Маркова; качество обслуживания}&#10;&#10;\DOI{10.14357/19922264180408}&#10;&#10;&#10;&#10;%\vspace*{-3pt}&#10;&#10;&#10; \begin{multicols}{2}&#10;&#10;\renewcommand{\bibname}{\protect\rmfamily Литература}&#10;%\renewcommand{\bibname}{\large\protect\rm References}&#10;&#10;{\small\frenchspacing&#10;{\baselineskip=10.5pt&#10;\begin{thebibliography}{99}&#10;%\vspace*{-3pt}&#10;&#10;&#10;\bibitem{2-fr-1}&#10;\Au{Rao S.\,K.} SDN and its use-cases~--- NV and NFV: A~state-of-the-art survey.~--- &#10;NEC Technologies India Ltd., 2014. 25~p.&#10;\bibitem{3-fr-1}&#10;\Au{Ghaznavi M., Shahriar~N., Ahmed~R., Boutaba~R.} &#10;Service function chaining simplified~// Arxiv.org, 2016. \mbox{arXiv}:1601.00751cs.&#10;\bibitem{4-fr-1}&#10;\Au{Hansson H., Jonsson~B.} A~logic for reasoning about time and reliability~// &#10;Form. Asp. Comput., 1994. Vol.~6. No.\,5. P.~512--535.&#10;&#10;\bibitem{1-fr-1} %4&#10;\Au{Delaet S., Dolev~S., Khankin~D., Tzur-David~S., Godinger~T.}&#10;Seamless SDN route updates~// IEEE 14th Symposium (International)&#10; on Network Computing and Applications.~--- IEEE, 2015. P.~120--125.&#10; &#10; &#10;\bibitem{5-fr-1}&#10;\Au{Frenkel S., Khankin D., Kutsyy~A.} Predicting and choosing alternatives &#10;of route updates per QoS VNF in SDN~// IEEE 16th Symposium (International)&#10;on Network Computing and Applications.~--- IEEE, 2017. P.~1--6.&#10;\bibitem{6-fr-1}&#10;\Au{Devi G., Upadhyaya~S.} An approach to distributed multi-path QoS routing~// &#10;Indian J.~Sci. Technol., 2015. Vol.~8. Iss.~20. P.~1--14. &#10;doi: 10.17485/ijst/2015/v8i20/49253.&#10;\bibitem{7-fr-1}&#10;\Au{Egilmez H.\,E., Civanlar S., Tekalp~A.\,M.} &#10;A~distributed QoS routing architecture for scalable video streaming over multi-domain &#10;OpenFlow networks~// 19th IEEE Conference (International)&#10;on Image Processing.~--- IEEE, 2012. P.~2237--2240.&#10;\bibitem{8-fr-1}&#10;\Au{Juttner A., Szviatovski B., Mecs~I., Rajko~Z.}&#10;Lagrange relaxation based method for the QoS routing problem~// &#10;IEEE INFOCOM 2001 Conference on Computer Communications. 20th &#10;Annual Joint Conference of the IEEE Computer and Communications Society&#10;Proceedings.~--- IEEE, 2001. Vol.~2. P.~859--868.&#10;\bibitem{9-fr-1}&#10;\Au{Yu Z., Ma F., Liu~J., Hu~B., Zhang~Z.}&#10;An efficient approximate algorithm for disjoint QoS routing~// &#10;Math. Probl. Eng., 2013. Vol.~2013. Art.\ No.\,489149. 9~p. &#10;doi: 10.1155/2013/489149.&#10;\bibitem{10-fr-1}&#10;\Au{Foerster K.-T., Schmid S., Vissicchio~S.}&#10;A~survey of consistent network updates~// Arxiv.org, 2016. arXiv:1609.02305.&#10;\bibitem{11-fr-1}&#10;\Au{Reitblatt M., Foster N., Rexford J., Walker~D.} &#10;Consistent updates for software-defined networks: Change you can believe in!~// &#10;10th ACM Workshop on Hot Topics in Networks Proceedings.~--- New York, NY, USA: ACM, &#10;2011. Art.\ No.\,7. doi: 10.1145/2070562.2070569.&#10;\bibitem{12-fr-1}&#10;\Au{Hogan M., Esposito F.} Stochastic delay forecasts for edge traffic engineering &#10;via Bayesian Networks~// IEEE 16th Symposium (International)&#10;on Network Computing and Applications.~--- IEEE, 2017. P.~1--4.&#10;\bibitem{13-fr-1}&#10;\Au{McGeer R.} A~safe, efficient Update Protocol for Openflow Networks~// &#10;1st Workshop on Hot Topics in Software Defined Networks Proceedings.~--- &#10;New York, NY, USA: ACM, 2012. Vol.~12. P.~61--66.&#10;\bibitem{14-fr-1}&#10;\Au{McGeer R.} 2013. A~correct, zero-overhead protocol for network updates~// &#10;2nd Workshop on Hot Topics in Software Defined Networking Proceedings.~--- &#10;New York, NY, USA: ACM, 2013. Vol.~13. P.~161--162.&#10;\bibitem{15-fr-1}&#10;\Au{Katta N.\,P., Rexford J., Walker~D.} Incremental consistent updates~// &#10;2nd Workshop on Hot Topics in Software Defined Networking Proceedings.~--- &#10;New York, NY, USA: ACM, 2013. Vol.~13. P.~49--54.&#10;\bibitem{16-fr-1}&#10;\Au{Dinitz Y., Dolev S., Khankin~D.}&#10; Dependence graph and master switch for seamless dependent &#10; routes replacement in SDN~// IEEE 16th Symposium &#10; (International) on Network Computing and Applications.~--- IEEE, 2017. P.~1--7.&#10; \bibitem{17-aaa-1}&#10;\Au{Amiri~S.\,A., Dudycz~S., Schmid~S., Wiederrecht~S}.&#10; Congestion-free rerouting of flows&#10;on DAGs~// ArXiv.org, 2016. arXiv:1611.09296.&#10;% [cs, math], Nov. 2016, arXiv: 1611.09296. [Online]. Available:&#10;%http://arxiv.org/abs/1611.09296&#10;&#10;\bibitem{17-fr-1}&#10;\Au{Kwiatkowska M., Norman~G., Parker~D.}&#10; PRISM~4.0: Verification of probabilistic real-time systems~//&#10; Computer aided verification~/&#10; Eds. G.~Gopalakrishnan, S.~Qadeer.~---&#10;Lecture notes in computer science ser.~--- Springer, 2011. &#10; Vol.~6806. P.~585--591.&#10;\bibitem{18-fr-1}&#10;\Au{Kwiatkowska M., Norman G., Parker~D.}&#10; PRISM manual, 2018. &#10;{\sf http://www.prismmodelchecker.org/manual}.&#10;\bibitem{19-fr-1}&#10;Open Networking Foundation. OpenFlow Switch Specification Ver~1.5.1, 2015. &#10;&#10;\bibitem{21-fr-1}&#10;\Au{Wu Q., Hao J.-K.} A~review on algorithms for maximum clique problems~// &#10;Eur. J.~Oper. Res., 2015. Vol.~242. No.\,3. P.~693--709.&#10;&#10;\bibitem{20-fr-1}&#10;\Au{Kaur S., Singh J., Ghumman~N.\,S.}&#10; Network programmability using POX controller~// Conference&#10; (International) on Communication, Computing and Systems, 2014. P.~138.&#10;\bibitem{22-fr-1}&#10;\Au{Lantz B., Heller B., McKeown~N.} &#10;A~network in a~laptop: Rapid prototyping for software-defined networks~// &#10;9th ACM SIGCOMM Workshop on Hot Topics in Networks Proceedings.~--- &#10;New York, NY, USA: ACM, 2010. Art.\ No.\,19. doi: 10.1145/1868447.1868466.&#10;\end{thebibliography}&#10;} }&#10;&#10;\end{multicols}&#10;&#10; \label{end\stat}&#10;&#10; \vspace*{-9pt}&#10;&#10;\hfill{\small\textit{Поступила в~редакцию 09.10.2018}}&#10;&#10;&#10;%\renewcommand{\bibname}{\protect\rm Литература}&#10;\renewcommand{\figurename}{\protect\bf Рис.}&#10;\renewcommand{\tablename}{\protect\bf Таблица}"/>
    </fulltext>
  </paper>
</papers>